{"version":3,"sources":["components/reusable/ForeCastHour.jsx","components/pages/ForecastByDay.js"],"names":["styles","title","textAlign","textTransform","fontWeight","color","subTitle","fontSize","float","marginLeft","image","width","height","container","padding","tempMin","tempMax","withRouter","props","value","className","style","minHeight","marginTop","cursor","alt","src","getImage","icon","dayName","time","minTemp","maxTemp","help","connect","state","payload","httpReducer","pending","dispatch","fetchData","day","service","fetchDataByDay","history","params","match","React","useState","data","setData","useEffect","Array","isArray","map","moment","dt_txt","format","weather","main","decimalAdjust","temp_min","temp_max","getForeCastByHours","SkeletonCard","count","Row","e","i","Col","key","onClick","push"],"mappings":"uKAuBMA,EAAS,CACXC,MAAO,CACHC,UAAW,SACXC,cAAe,YACfC,WAAY,OACZC,MAAO,WAEXC,SAAU,CACNJ,UAAW,SACXC,cAAe,YACfE,MAAO,OACPE,SAAU,GACVC,MAAM,QACNC,WAAW,IAGfC,MAAO,CACHC,MAAO,IACPC,OAAQ,KAEZC,UAAW,CACPC,QAAS,GACTZ,UAAU,QAEda,QAAS,CACLX,WAAY,OACZC,MAAO,UACPE,SAAU,IAGdS,QAAS,CACLZ,WAAY,OACZC,MAAO,UACPE,SAAU,KAIHU,eAzDM,SAACC,GAAW,IACpBC,EAAUD,EAAVC,MACT,OACI,oCACI,yBAAMC,UAAU,WAAWC,MAAO,CAAEV,MAAO,OAAQG,QAAS,MAAOQ,UAAW,OAAQC,UAAW,OAAQC,OAAQ,YAC7G,yBAAKC,IAAK,GAAIJ,MAAOrB,EAAOU,MAAOgB,IAAKC,YAASR,EAAMS,QACvD,yBAAKP,MAAOrB,EAAOa,WACf,0BAAMQ,MAAOrB,EAAOC,OAAQkB,EAAMU,QAAlC,OAA+CV,EAAMW,MAErD,6BACI,0BAAMT,MAAOrB,EAAOe,SAAS,0BAAMM,MAAO,CAAEd,SAAU,KAAzB,OAA7B,IAAwEY,EAAMY,QAA9E,QACA,6BACA,0BAAMV,MAAOrB,EAAOgB,SAAS,0BAAMK,MAAO,CAAEd,SAAU,KAAzB,OAA7B,IAAwEY,EAAMa,QAA9E,e,mDCqElBhC,EAAS,CACbC,MAAO,CACLC,UAAW,OACXC,cAAe,YACfC,WAAY,OACZC,MAAO,OACPkB,UAAW,IAEbU,KAAM,CACJ/B,UAAW,SACXC,cAAe,YACfC,WAAY,OACZC,MAAO,UACPkB,UAAW,GACXC,OAAQ,YAGGP,sBAAWiB,aA/BJ,SAAAC,GACpB,OAAO,2BACFA,GADL,IAEEC,QAASD,EAAME,YAAYD,SAAW,GACtCE,QAASH,EAAME,YAAYC,aAIJ,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAACC,GACVF,EAASG,IAAQC,eAAeF,QAqBVP,EAvEJ,SAAAhB,GAAU,IACtBkB,EAAgDlB,EAAhDkB,QAASE,EAAuCpB,EAAvCoB,QAASE,EAA8BtB,EAA9BsB,UAAWI,EAAmB1B,EAAnB0B,QAC7BC,EADgD3B,EAAV4B,MACtCD,OAFqB,EAILE,IAAMC,SAAS,IAJV,mBAItBC,EAJsB,KAIhBC,EAJgB,KAgB7B,OAXAH,IAAMI,WAAU,WACW,oBAAdX,GACTA,EAAUK,EAAOJ,OAClB,CAACI,EAAOJ,IAAKD,IAEhBO,IAAMI,WAAU,YACTb,GAAWc,MAAMC,QAAQjB,IAC5Bc,EA9BqB,SAACd,GAY1B,OAXWA,EAAQkB,KAAI,SAAAL,GAAI,MACzB,CACEnB,KAAMyB,EAAON,EAAKO,QAAQC,OAAO,SACjC5B,QAAS0B,EAAON,EAAKO,QAAQC,OAAO,OACpCtB,MAAOc,EAAKS,QAAQ,GAAGC,KACvB/B,KAAMqB,EAAKS,QAAQ,GAAG9B,KACtBG,QAAS6B,YAAc,QAASX,EAAKU,KAAKE,SAAW,QAAS,GAC9D7B,QAAS4B,YAAc,QAASX,EAAKU,KAAKG,SAAW,QAAS,GAC9Db,KAAMA,MAqBEc,CAAmB3B,MAC5B,CAACE,EAASF,IAIX,6BACE,yBAAKhB,UAAU,mBACb,wBAAIC,MAAOrB,EAAOC,OAAlB,eAAsC4C,EAAOJ,KAE5CH,EAAU,kBAAC0B,EAAA,EAAD,CAAkBC,MAAO,IAAQ,MAC1C3B,GAAWc,MAAMC,QAAQJ,GACzB,kBAACiB,EAAA,EAAD,KACGjB,EAAKK,KAAI,SAACa,EAAGC,GACZ,OAAO,kBAACC,EAAA,EAAD,CAAKC,IAAKF,EAAG/C,MAAO,CAAEnB,UAAW,kBAAoBkB,UAAU,gBAA/D,IAA+E,kBAAC,EAAD,CAAcD,MAAOgD,SAG7G,MAGN,yBAAK/C,UAAU,kBACb,wBAAIC,MAAOrB,EAAOiC,KAAMsC,QAAS,kBAAM3B,EAAQ4B,KAAK,OAApD","file":"static/js/6.b2f1f439.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { getImage } from '../../core/helper/functions';\nconst ForeCastHour = (props) => {\n    const {  value } = props\n    return (\n        <>\n            <div  className=\"cardData\" style={{ width: \"100%\", padding: \"0px\", minHeight: \"70px\", marginTop: \"10px\", cursor: 'pointer' }} >\n                <img alt={\"\"} style={styles.image} src={getImage(value.icon)} />\n                <div style={styles.container}>                     \n                    <span style={styles.title}>{value.dayName} at {value.time}</span>\n                   \n                    <div>\n                        <span style={styles.tempMin}><span style={{ fontSize: 10 }}>min</span> {value.minTemp}&deg;</span>\n                        <br />\n                        <span style={styles.tempMax}><span style={{ fontSize: 10 }}>max</span> {value.maxTemp}&deg;</span>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst styles = {\n    title: {\n        textAlign: 'center',\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n        color: '#42404d'\n    },\n    subTitle: {\n        textAlign: 'center',\n        textTransform: 'uppercase',        \n        color: '#222',\n        fontSize: 12,\n        float:'right',\n        marginLeft:10\n    },\n\n    image: {\n        width: 100,\n        height: 100\n    },\n    container: {\n        padding: 10,\n        textAlign:'left'\n    },\n    tempMin: {\n        fontWeight: 'bold',\n        color: '#5136c9',\n        fontSize: 20\n    }\n    ,\n    tempMax: {\n        fontWeight: 'bold',\n        color: '#dc3545',\n        fontSize: 20\n    }\n}\n\nexport default withRouter(ForeCastHour);\n","import React from 'react';\nimport ForeCastHour from '../reusable/ForeCastHour';\nimport SkeletonCardList from '../Loader/SkeletonCard';\nimport service from '../../core/services/fetch-data'\nimport { Col, Row } from 'react-bootstrap';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport * as moment from 'moment'\nimport { decimalAdjust } from '../../core/helper/functions';\n\n\n\nconst getForeCastByHours = (payload) => {\n  let data = payload.map(data => (\n    {\n      time: moment(data.dt_txt).format('HH:SS'),\n      dayName: moment(data.dt_txt).format('ddd'),\n      state: data.weather[0].main,\n      icon: data.weather[0].icon,\n      minTemp: decimalAdjust('floor', data.main.temp_min - 272.15, -2),\n      maxTemp: decimalAdjust('floor', data.main.temp_max - 272.15, -2),\n      data: data\n\n    }))\n  return data\n}\n\n\n\n\nconst ForecastByDay = props => {\n  const { payload, pending, fetchData, history, match } = props\n  const { params } = match\n\n  const [data, setData] = React.useState([])\n  React.useEffect(() => {\n    if (typeof fetchData === 'function')\n      fetchData(params.day)\n  }, [params.day, fetchData])\n\n  React.useEffect(() => {\n    if (!pending && Array.isArray(payload))\n      setData(getForeCastByHours(payload))\n  }, [pending, payload])\n\n\n  return (\n    <div >\n      <div className=\" cardContainer \">\n        <h1 style={styles.title}>Forecast of {params.day}</h1>\n\n        {pending ? <SkeletonCardList count={5} /> : null}\n        {!pending && Array.isArray(data) ?\n          <Row >\n            {data.map((e, i) => {\n              return <Col key={i} style={{ textAlign: \"-webkit-center\" }} className=\"cardForecast\"> <ForeCastHour value={e} /></Col>\n            })}\n          </Row>\n          : null}\n      </div>\n\n      <div className=\" cardContainer\">\n        <h1 style={styles.help} onClick={() => history.push(\"/\")}>Go to Home</h1>\n      </div>\n\n\n\n    </div>\n  );\n}\nlet mapStateToProps = state => {\n  return {\n    ...state,\n    payload: state.httpReducer.payload || [],\n    pending: state.httpReducer.pending\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchData: (day) => {\n    dispatch(service.fetchDataByDay(day))\n  }\n});\n\nconst styles = {\n  title: {\n    textAlign: 'left',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: '#555',\n    marginTop: 50\n  },\n  help: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: '#c3c3c3',\n    marginTop: 50,\n    cursor: 'pointer'\n  }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ForecastByDay));\n\n\n\n\n\n"],"sourceRoot":""}