{"version":3,"sources":["core/actions/index.js","core/reducers/httpReducer.js","core/reducers/index.js","core/helper/store.js","components/containers/Header.jsx","core/helper/i18n.js","components/reusable/Page404.js","routes.js","components/containers/Layout.js","App.js","components/reusable/Loading.js","serviceWorker.js","index.js","core/services/service.js","core/services/fetch-data.js"],"names":["types","HTTP_PENDING","HTTP_ERROR","HTTP_SUCCESS","actions","startHTTPRequest","type","stopHTTPRequestError","error","stopRequestSuccess","payload","concat","initialState","pending","combineReducers","httpReducer","state","action","routing","routerReducer","form","formReducer","loggerMiddleware","createLogger","store","createStore","rootReducer","applyMiddleware","thunk","cityList","withRouter","connect","dispatch","fetchData","city","service","props","location","React","useState","localStorage","getItem","process","setCity","useEffect","setItem","pathname","className","style","textAlign","fontSize","marginRight","Form","Control","disabled","width","float","onChange","e","target","value","as","map","i","key","_t","opt","borderBottom","padding","Row","Col","lg","color","fontWeight","textTransform","marginLeft","onClick","history","push","routes","path","exact","name","component","lazy","Page404","Layout","route","idx","render","App","position","toast","POSITION","TOP_RIGHT","Suspense","fallback","xmlns","viewBox","cx","cy","r","stroke","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","header","handleResponse","response","ok","json","data","mapErrorToMessage","clone","status","text","endpoint","requestOptions","method","headers","fetch","fetchDataByDay","date","info","list","filter","dt_txt","indexOf"],"mappings":"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","file":"static/js/main.17dcc51a.chunk.js","sourcesContent":["\nconst types = {\n\n    HTTP_PENDING: 'HTTP_PENDING',\n    HTTP_ERROR: 'HTTP_ERROR',\n    HTTP_SUCCESS: 'HTTP_SUCCESS',\n \n   \n}\n\nconst actions = {\n\n    //HTTP\n    startHTTPRequest: () => ({\n        type: types.HTTP_PENDING,\n    }),\n    stopHTTPRequestError: (error) => ({\n        type: types.HTTP_ERROR,\n        error: error\n    }),\n    stopRequestSuccess: (payload,concat) => ({\n        type: types.HTTP_SUCCESS,\n        payload: payload,\n       \n    }) \n}\n\n\n\nexport { types, actions };\n","import { types } from '../actions';\n\nconst initialState = {\n    pending: false,\n    payload: {},\n    error: null,\n \n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.HTTP_PENDING:\n            return {\n                ...state,\n                pending: true\n            }\n        case types.HTTP_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                payload: action.payload\n\n            }\n\n        case types.HTTP_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.error,\n            }\n\n        \n        default:\n            return state;\n    }\n}\n\n","import { combineReducers } from 'redux';\nimport httpReducer from './httpReducer'\nimport { reducer as formReducer } from \"redux-form\";\nimport { routerReducer } from 'react-router-redux';\n \nexport default combineReducers({\n    httpReducer,    \n    routing: routerReducer,\n    form: formReducer\n\n});\n","import rootReducer from '../../core/reducers';\nimport { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk';\n\nconst loggerMiddleware = createLogger()\n\nexport const store = createStore(rootReducer,\n    applyMiddleware(\n        loggerMiddleware,\n        thunk,\n        \n    )\n);\n\n","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport service from '../../core/services/fetch-data'\n\nconst cityList = [\n  'Pinar del Rio',\n  //'Isla de la Juventud',\n  'La Habana',\n  'Mayabeque',\n  'Artemisa',\n  'Matanzas',\n  'Santa Clara',\n  //'Santi Spíritus',\n  'Cienfuegos',\n  'Ciego de Avila',\n  'Las Tunas',\n  'Camaguey',\n  'Holguín',\n  'Santiago de Cuba',\n  'Guantánamo',\n]\nfunction Header(props) {\n  const { pending, fetchData, location } = props\n  const [city, setCity] = React.useState((localStorage.getItem('city') ? localStorage.getItem('city') : process.env.REACT_APP_CITY))\n  React.useEffect(() => {\n    localStorage.setItem('city', city)\n    if (typeof fetchData === 'function' && location.pathname === '/')\n      fetchData(city)\n  }, [city, location,fetchData])\n\n  return (\n    <>\n\n      <header className=\"cd-main-header js-cd-main-header\" style={{ textAlign: 'right' }}>\n        <div className=\"cd-nav__list js-cd-nav__list\" style={{ fontSize: 20, marginRight: 10 }}>\n          Select a city to show the forecast: &nbsp;\n          <Form.Control disabled={pending || location.pathname !== '/'} style={{ width: \"200px\", float: 'right' }} onChange={(e) => setCity(e.target.value)} value={city} as=\"select\">\n\n            {cityList.map((e, i) => <option key={i} value={e}>{e}</option>)}\n          </Form.Control>\n        </div>\n      </header>\n\n\n\n\n    </>\n  );\n}\nlet mapStateToProps = state => {\n  return {\n    ...state,\n    pending: state.httpReducer.pending,\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchData: (city) => {\n    dispatch(service.fetchData(city))\n  }\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Header));\n\n\n","//import i18next from 'i18next'\n/*\nexport const setUiLocale = (locale) => {\n\n    return fetch(`/translations/${locale}.json`)\n        .then(response => response.json())\n        .then(loadedResources => (\n            new Promise((resolve, reject) => {\n                i18next.init({\n                    lng: locale,\n                    debug: false,\n                    resources: { [locale]: loadedResources },\n                    interpolation: {\n                        format: function (value, format, locale) {\n                            return value\n                        }\n                    }\n                }, (err, t) => {                   \n                    resolve()\n                })\n            })\n        ))\n        .catch(err => console.log(err))\n}\n*/\n\nexport const _t = (key, opt) => {\n    return key;\n    //return i18next.t(key, opt)\n}\n","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { withRouter } from \"react-router-dom\";\nimport { _t } from '../../core/helper/i18n';\n\n\n\nconst Page404 = (props) => {\n\n\n\n    return (\n        <>\n            <div className=\"containerMessagePage\" style={{ borderBottom: '1px solid #c3c3c3', padding: \"40px\", textAlign: 'center' }}>\n                <Row>\n                    <Col lg=\"4\">\n                        <i style={{ fontSize: '150px', color: '#35B031' }} className=\"fa fa-map-signs\"></i>\n                    </Col>\n                    <Col lg=\"8\">\n                        <h1 style={{ fontSize: '25px', fontWeight: 'bold', textTransform: 'uppercase', color: '#35B031' }}> {_t('Página no encontrada')}</h1>\n                        <p style={{ marginLeft: '10px', fontSize: '15px', fontWeight: 'bold', color: '#35B031' }}> {_t('Lo sentimos. No podemos encontrar una página que cumpla con la solitud hecha')}</p>\n\n                    </Col>\n\n                </Row>\n\n\n\n\n            </div >\n            <div className=\"containerMessagePage\" style={{ textAlign: 'center', padding: '20px' }}>\n                <h2 onClick={() => props.history.push(\"/\")} className=\"filterTag\" >REGRESAR A DEDITI</h2>\n              \n                <h2 onClick={() => props.history.push(\"/publish\")} className=\"filterTag\" >PUBLICAR OTRA OFERTA </h2>\n\n            </div>\n        </>\n    );\n}\n\n\n\nexport default withRouter(Page404);\n","import React from 'react';\nimport Page404 from './components/reusable/Page404';\nconst ForecastNextDays = React.lazy(() => import('./components/pages/ForecastNextDays'));\nconst ForecastByDay = React.lazy(() => import('./components/pages/ForecastByDay'));\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  { path: '/', exact: true, name: 'Home', component: ForecastNextDays  },\n  { path: '/:day', exact: true, name: 'Search List', component: ForecastByDay },\n \n\n  { path: '/404', name: 'Page404', component: Page404 },\n\n];  \n\n\nexport default routes;\n","import React, { Suspense } from 'react';\nimport Header from './Header';\nimport routes from '../../routes';\nimport { Route, Switch } from 'react-router-dom';\n import Page404 from '../reusable/Page404';\nfunction Layout() {\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container-fluid\">\n        <Suspense>\n          <Switch>\n\n            {routes.map((route, idx) => {\n              return route.component ? (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                    <route.component {...props} />\n                  )} />\n              ) : (null);\n            })}\n            <Route component={Page404} />\n\n          </Switch>\n        </Suspense>\n      </div>\n \n    </div>\n  );\n}\n\nexport default Layout;\n\n\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { store } from './core/helper/store';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Route, Switch\n} from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport Layout from './components/containers/Layout';\nimport { Loading } from './components/reusable/Loading';\n   \nfunction App() {\n  return (\n    <div>\n      \n      <Provider store={store}>\n        <ToastContainer position={toast.POSITION.TOP_RIGHT} />\n        <Router>\n          <React.Suspense fallback={Loading()}>\n            <Switch>\n               <Route path=\"/\" name=\"Layout\" render={props => <Layout {...props} />} />\n            </Switch>\n          </React.Suspense>\n        </Router>\n      </Provider>\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport const Loading = () => <div className=\"containerLoading\" >\n \n    <Row>\n        <Col>\n            <div style={{marginLeft:'-80px'}}>\n                <svg className=\"loader\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 340 340\">\n                    <circle cx=\"170\" cy=\"170\" r=\"160\" stroke=\"#35B031\" />\n                    <circle cx=\"170\" cy=\"170\" r=\"135\" stroke=\"#35B031\" />\n                    <circle cx=\"170\" cy=\"170\" r=\"110\" stroke=\"#35B031\" />\n                    <circle cx=\"170\" cy=\"170\" r=\"85\" stroke=\"#35B031\" />\n                </svg>\n            </div>\n        </Col>\n    </Row>\n\n\n\n\n</div>;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { toast } from \"react-toastify\";\n \n\nconst post = (endpoint, body) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: header(),\n        body: JSON.stringify(body)\n    };\n    return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions).then(handleResponse)\n}\n\nconst put = (endpoint, body) => {\n    const requestOptions = {\n        method: 'PUT',\n        headers: header(),\n        body: JSON.stringify(body)\n    };\n    return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions)\n        .then(handleResponse)\n}\n\nconst get = (endpoint) => {\n    const requestOptions = {\n        method: 'GET',\n        headers: header(),\n\n    };\n    return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions)\n        .then(handleResponse)\n}\n\n\n\n\nconst del = (endpoint) => {\n    const requestOptions = {\n        method: 'DELETE',\n        headers: header()\n    };\n    return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions)\n        .then(handleResponse)\n}\n\n\nconst header = () => {\n    let header = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n    return header;\n}\n\n\n\n\nconst handleResponse = (response) => {\n    if (!response.ok) {\n        mapErrorToMessage(response.clone())\n        throw response\n    } else {\n        return response.json().then(data => {\n            return data;\n        });\n    }\n}\n\nconst mapErrorToMessage = (response) => {\n    let code = response.status\n    switch (code) {\n        case 400:\n            response.text().then(data => {\n                toast.error(data)\n            })\n            break;\n        case 404:\n            toast.error('Element not found')\n            break;\n        case 401:\n            toast.error('Full authentication is required to access this resource')\n            break;\n        case 500:\n            toast.error('Internal Error Server (This message is only for development proyect)')\n            break;\n        default:\n        /*\n            return response.json().then(data => {\n                if (!data.message) {\n                    toast.error(response.statusText)\n                } else {\n                    toast.error( data.message)\n                }\n            });\n            */\n    }\n}\n\n\nexport default { post, put, del, get, mapErrorToMessage }","import service from \"./service\";\nimport { actions } from \"../actions/index\";\n\nfunction fetchData(city) {\n    return dispatch => {\n        dispatch(actions.startHTTPRequest());\n        service.get(`/forecast?q=${city}&cnt=40&appid=${process.env.REACT_APP_TOKEN}`).then((data) => {\n\n            dispatch(actions.stopRequestSuccess(data));\n        }).catch(() => {\n            dispatch(actions.stopHTTPRequestError(\"\"));\n        })\n    }\n}\n\nfunction fetchDataByDay(date) {\n    return dispatch => {\n        dispatch(actions.startHTTPRequest());\n        service.get(`/forecast?q=${process.env.REACT_APP_CITY}&cnt=40&appid=${process.env.REACT_APP_TOKEN}`).then((data) => {\n            let info = []\n           \n            if (data.list)\n                info = data.list.filter(data => data.dt_txt.indexOf(date) !== -1)\n\n           \n            dispatch(actions.stopRequestSuccess(info));\n        }).catch(() => {\n            dispatch(actions.stopHTTPRequestError(\"\"));\n        })\n    }\n}\n\n\n\n\n\n\nexport default { fetchData,fetchDataByDay };\n\n\n\n"],"sourceRoot":""}