{"version":3,"sources":["components/reusable/ForeCastDay.jsx","components/reusable/Graph.js","components/pages/ForecastNextDays.js"],"names":["styles","title","textAlign","textTransform","fontWeight","color","subTitle","fontSize","float","marginLeft","image","width","height","container","padding","tempMin","tempMax","withRouter","props","history","value","onClick","push","id","className","style","minHeight","marginTop","cursor","alt","src","getImage","icon","dayName","minTemp","maxTemp","Graph","graphData","React","useState","chatData","setChartData","useEffect","datumsS1","datumsS2","forEach","element","x","moment","date","toDate","y","r","undefined","label","datums","series","useMemo","showPoints","axes","primary","type","position","data","tooltip","help","connect","state","payload","httpReducer","pending","setData","setTitle","list","array","filter","dt_txt","indexOf","map","weather","main","format","decimalAdjust","temp_min","temp_max","minList","min","sort","a","b","maxList","max","transformData","info","city","dateData","startDate","endDate","length","name","getGeneralInfo","borderRadius","SkeletonCard","Row","e","i","Col","key"],"mappings":"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","file":"static/js/7.4de30157.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { getImage } from '../../core/helper/functions';\nconst ForeCastDay = (props) => {\n    const { history, value } = props\n    return (\n        <>\n            <div onClick={() => history.push(`/${value.id}`)} className=\"cardData\" style={{ width: \"100%\", padding: \"0px\", minHeight: \"70px\", marginTop: \"10px\", cursor: 'pointer' }} >\n                <img alt={\"\"} style={styles.image} src={getImage(value.icon)} />\n                <div style={styles.container}>\n                    <span style={styles.subTitle}>{value.id}</span>\n                    <span style={styles.title}>{value.dayName}</span>\n                    \n                    <div>\n                        <span style={styles.tempMin}><span style={{ fontSize: 10 }}>min</span> {value.minTemp}&deg;</span>\n                        <br />\n                        <span style={styles.tempMax}><span style={{ fontSize: 10 }}>max</span> {value.maxTemp}&deg;</span>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst styles = {\n    title: {\n        textAlign: 'center',\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n        color: '#42404d'\n    },\n    subTitle: {\n        textAlign: 'center',\n        textTransform: 'uppercase',        \n        color: '#222',\n        fontSize: 12,\n        float:'right',\n        marginLeft:10\n    },\n\n    image: {\n        width: 100,\n        height: 100\n    },\n    container: {\n        padding: 10,\n        textAlign:'left'\n    },\n    tempMin: {\n        fontWeight: 'bold',\n        color: '#5136c9',\n        fontSize: 20\n    }\n    ,\n    tempMax: {\n        fontWeight: 'bold',\n        color: '#dc3545',\n        fontSize: 20\n    }\n}\n\nexport default withRouter(ForeCastDay);\n","import React from 'react'\nimport { Chart } from 'react-charts'\nimport * as moment from 'moment'\n\nconst Graph = (props) => {\n\n    const { graphData } = props\n \n    const [chatData, setChartData] = React.useState([])\n    React.useEffect(() => {\n\n        let datumsS1 = []\n        let datumsS2 = []\n    \n        graphData.forEach(element => {\n            datumsS1.push({\n                x: moment(element.date).toDate(),\n                y: element.minTemp,\n                r:undefined\n            })\n            datumsS2.push({\n                x: moment(element.date).toDate(),\n                y: element.maxTemp,\n                r:undefined\n            })\n        });\n\n        setChartData([{ label: 'Low temperatures', datums: datumsS1 },\n        { label: 'Maximum temperatures', datums: datumsS2 }\n        ])\n    }, [graphData])\n\n    \n\n    const series = React.useMemo(\n        () => ({\n            showPoints: false\n        }),\n        []\n    )\n\n    const axes = React.useMemo(\n        () => [\n            { primary: true, type: 'time', position: 'bottom' },\n            { type: 'linear', position: 'left' }\n        ],\n        []\n    )\n    return (\n        <div style={{ width: '100%', height: 300, }}>\n\n            <Chart data={chatData} series={series} axes={axes} tooltip />\n\n\n        </div>\n    )\n}\n\nexport default Graph","import React from 'react';\nimport ForeCastDay from '../reusable/ForeCastDay';\nimport SkeletonCardList from '../Loader/SkeletonCard';\nimport { Col, Row } from 'react-bootstrap';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport * as moment from 'moment'\nimport { decimalAdjust } from '../../core/helper/functions';\nimport Skeleton from 'react-loading-skeleton';\nimport Graph from '../reusable/Graph';\n\n\nconst transformData = (payload) => {\n  let array = []\n  let listOfdates = payload.list.filter(data => data.dt_txt.indexOf('00:00:00') !== -1).map(data => (\n    {\n      date: data.dt_txt,\n      state: data.weather[0].main,\n      icon: data.weather[0].icon,\n      id: moment(data.dt_txt).format('YYYY-MM-DD'),\n      dayName: moment(data.dt_txt).format('ddd'),\n      minTemp: decimalAdjust('floor', data.main.temp_min - 272.15, -2),\n      maxTemp: decimalAdjust('floor', data.main.temp_max - 272.15, -2),\n      data: data\n\n    }))\n  listOfdates.forEach(date => {\n    let minList = payload.list.filter(data => data.dt_txt.indexOf(date.id) !== -1)\n      .map(data => ({ min: data.main.temp_min }))\n      .sort((a, b) => (a.min > b.min) ? 1 : (a.min < b.min) ? -1 : 0)\n    let maxList = payload.list.filter(data => data.dt_txt.indexOf(date.id) !== -1)\n      .map(data => ({ max: data.main.temp_max }))\n      .sort((a, b) => (a.max > b.max) ? -1 : (a.max < b.max) ? 1 : 0)\n\n\n    array.push({\n      ...date,\n      minTemp: decimalAdjust('floor', minList[0].min - 272.15, -2),\n      maxTemp: decimalAdjust('floor', maxList[0].max - 272.15, -2)\n    })\n\n  });\n  return array\n}\n\n\n\n\nconst getGeneralInfo = (payload) => {\n  if (payload.city && payload.list) {\n    let dataByFirstTime = payload.list.filter(data => data.dt_txt.indexOf('00:00:00') !== -1)\n    let dateData = dataByFirstTime.map(data => ({ date: moment(data.dt_txt).format('YYYY/MM/DD'), }))\n\n    return {\n      startDate: dateData[0].date,\n      endDate: dateData[dateData.length - 1].date,\n      city: payload.city.name,\n    }\n  }\n  return {}\n}\n\n\nconst ForecastNextDays = props => {\n  const { payload, pending } = props\n  const [data, setData] = React.useState([])\n  const [title, setTitle] = React.useState(\"\")\n \n\n  React.useEffect(() => {\n    if (!pending && payload.list) {\n     \n      setData(transformData(payload))\n      let info = getGeneralInfo(payload)\n      setTitle(`Forecast in ${info.city} from ${info.startDate} to ${info.endDate}`)\n    }\n  }, [pending,payload])\n\n\n  return (\n    <div >\n      <div className=\" cardContainer \">\n        {pending ? <Skeleton style={{ marginTop: 50, height: '25px', width: '50%', borderRadius: '6px' }} /> : <h1 style={styles.title}>{title}</h1>}\n\n        {pending ? <SkeletonCardList /> : null}\n        {!pending ?\n          <Row >\n            {data.map((e, i) => {\n              return <Col key={i} style={{ textAlign: \"-webkit-center\" }} className=\"cardForecast\"> <ForeCastDay value={e} /></Col>\n            })}\n          </Row>\n          : null}\n        <div style={{ marginTop: 40 }}>\n          {!pending ? <Graph graphData={data} /> : null}\n        </div>\n      </div>\n\n      <div className=\" cardContainer\">\n        <h1 style={styles.help}>Click on a forecast to see the details</h1>\n      </div>\n\n\n    </div>\n  );\n}\nlet mapStateToProps = state => {\n  return {\n    ...state,\n    payload: state.httpReducer.payload,\n    pending: state.httpReducer.pending,\n\n  }\n}\n\n\nconst styles = {\n  title: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: '#555',\n    marginTop: 50\n  },\n  help: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontWeight: 'bold',\n    color: '#c3c3c3',\n    marginTop: 50\n  }\n}\nexport default withRouter(connect(mapStateToProps, null)(ForecastNextDays));\n\n\n\n\n\n"],"sourceRoot":""}